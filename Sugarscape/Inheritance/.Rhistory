panel.grid.minor = element_blank(),
plot.background = element_blank(),
plot.title = element_text(lineheight=3,
face="bold",
color="black",
size=14)) +
# fix axes to avoid distortion in the picture
coord_fixed(ratio = 1) +
# add the title
ggtitle(title)
return(p)
}
plotDelib()
ggplot(data = agents, aes(x = x, y = y, color = position)) +
# resize dots to grid
geom_point(size = 100/sqrt(prod(dims)))
dims <- c(max(agents$x), max(agents$y))
dims
ggplot(data = agents, aes(x = x, y = y, color = position)) +
# resize dots to grid
geom_point(size = 100/sqrt(prod(dims)))
ggplot(data = agents, aes(x = x, y = y, color = position))
agents
class(agents$position)
plotDelib <- function(title = "Deliberative Space"){
require(data.table)
require(ggplot2)
require(RColorBrewer)
# find the dimensions of the grid to get the best dot size
dims <- c(max(agents$x), max(agents$y))
# plot the landscape gradiented by density of sugar in each cell
p <- ggplot(data = agents, aes(x = x, y = y, color = as.factor(position))) +
# resize dots to grid
geom_point(size = 100/sqrt(prod(dims))) +
# theme: mostly blank
theme_bw() +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank(),
plot.title = element_text(lineheight=3,
face="bold",
color="black",
size=14)) +
# fix axes to avoid distortion in the picture
coord_fixed(ratio = 1) +
# add the title
ggtitle(title)
return(p)
}
plotDelib()
deliberate <- function(iterations){
for(i in iterations){
agents$cdelib <<- sapply(1:nrow(agents), function(x){
agents$dprop[x] > runif(1) # Each agent chooses whether to deliberate in this round
})
# Subfunction for agents to pick a deliberative partner (wrapped world)
pickpartner <- function(x_value, y_value, dimension){
cur_ag <- agents[x == x_value & y == y_value, agid] # Store current agent ID
if(cur_ag %in% agents$dpart){
return(agents[agents$dpart == cur_ag, agid]) # If agent has already been claimed as a deliberative partner, match them with the agent who claimed them
}else{
x_vals <- c(x_value+1, x_value, x_value-1) # Look left and right
x_vals <- sapply(x_vals, function(x){
if(x < 1){x = dimension}
if(x > dimension){x = 1}
else{x}})
y_vals <- c(y_value+1, y_value, y_value-1) # Look up and down
y_vals <- sapply(y_vals, function(x){
if(x < 1){x = dimension}
if(x > dimension){x = 1}
else{x}})
# Return agent IDs in Moore Neighborhood who want to deliberate but don't already have a partner
delib.ids <- agents[x %in% x_vals & y %in% y_vals & cdelib == TRUE & agid != cur_ag, agid] # Deliberating agents in Moore neighborhood
delib.ids <- delib.ids[! delib.ids %in% agents$dpart] # Subtract agents who are already in list of partners
delib.ids <- delib.ids[! delib.ids %in% agents$agid[!is.na(agents$dpart)]] # Subtract agents who already have partners
if(length(delib.ids) == 0){
return(NA)
}
if(length(delib.ids) == 1){
return(delib.ids)
}else{
return(sample(delib.ids, 1)) # Return one agent from Moore neighborhood who isn't already partnered up
}
}
}
agents$dpart <<- NA
for(p in 1:nrow(agents)){
if(agents$cdelib[p] == FALSE) {next}
# Agents who want to deliberate partner up
agents$dpart[p] <<- pickpartner(x_value = agents[agid == p, x], y_value = agents[agid == p, y], dimension = max(agents$x))
}
delibs <- agents$agid[!is.na(agents$dpart)] # Vector of agents who are deliberating this round
delibspace <- subset(agents, agid %in% delibs, select = c(1:5))
delibspace$reas <- NA
delibspace$force <- NA
for(i in 1:(length(delibs)/2)){
# Deliberation between first agent in delibs vector and their partner
a <- delibs[1]
p <- agents[agid == delibs[1], dpart]
# Agents each state position and reason, sampled from their argument repertoire
a.pos <- agents[agid == a, position]
a.reas <- sample(agents[agid == a, p.rep[[1]]], 1)
p.pos <- agents[agid == p, position]
p.reas <- sample(agents[agid == p, p.rep[[1]]], 1)
# Force of agent's argument = agent's deliberative quality * listener's receptivity to the reason they give
a.force <- agents[agid == a, dqual] * argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3]
p.force <- agents[agid == p, dqual] * argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3]
# Update deliberative space with reasons and positions
delibspace$reas[delibspace$agid == a] <- a.reas
delibspace$reas[delibspace$agid == p] <- p.reas
delibspace$force[delibspace$agid == a] <- a.force
delibspace$force[delibspace$agid == p] <- p.force
# If the agents agree:
if(a.pos == p.pos){
# If an argument is powerful (note: lower threshold for powerful arguments if agents agree):
if(a.force > (agents[agid == p, dqual]/2)){
# The speaker's propensity to deliberate, deliberative quality, and receptivity to the reason given increase
agents$dprop[a] <<- agents$dprop[a] + .1*agents$dprop[a]
if(agents$dprop[a] > 1){agents$dprop[a] <<- 1}
agents$dqual[a] <<- agents$dqual[a] + .1*agents$dqual[a]
if(agents$dqual[a] > 1){agents$dqual[a] <<- 1}
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] +
.1*argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3]
if(argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] > 1){
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<- 1
}
# The argument is added to the listener's for-repertoire and their receptivity to the reason given increases
agents$p.rep[p][[1]] <<- unique(as.numeric(c(agents$p.rep[p][[1]], a.reas)))
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<-
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] +
.1*argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3]
if(argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] > 1){
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<- 1
}
}
if(p.force > (agents[agid == a, dqual]/2)){
# The speaker's propensity to deliberate, deliberative quality, and receptivity to the reason given increase
agents$dprop[p] <<- agents$dprop[p] + .1*agents$dprop[p]
if(agents$dprop[p] > 1){agents$dprop[p] <<- 1}
agents$dqual[p] <<- agents$dqual[p] + .1*agents$dqual[p]
if(agents$dqual[p] > 1){agents$dqual[p] <<- 1}
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] <<-
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] +
.1*argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3]
if(argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] > 1){
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] <<- 1
}
# The argument is added to the listener's for-repertoire and their receptivity to the reason given increases
agents$p.rep[a][[1]] <<- unique(as.numeric(c(agents$p.rep[a][[1]], p.reas)))
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] +
.1*argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3]
if(argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] > 1){
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<- 1
}
}
# If an argument is not powerful, nothing happens
}
# If the agents disagree:
if(a.pos != p.pos){
# If an argument is powerful:
if(a.force > (agents[agid == p, dqual])){
# The speaker's propensity to deliberate, deliberative quality, and receptivity to the reason given increase
agents$dprop[a] <<- agents$dprop[a] + .1*agents$dprop[a]
if(agents$dprop[a] > 1){agents$dprop[a] <<- 1}
agents$dqual[a] <<- agents$dqual[a] + .1*agents$dqual[a]
if(agents$dqual[a] > 1){agents$dqual[a] <<- 1}
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] +
.1*argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3]
if(argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] > 1){
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<- 1
}
# The argument is added to the listener's against-repertoire and their receptivity to the reason given increases
agents$o.rep[p][[1]] <<- unique(as.numeric(c(agents$o.rep[p][[1]], a.reas)))
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<-
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] +
.1*argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3]
if(argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] > 1){
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<- 1
}
}
if(p.force > (agents[agid == a, dqual])){
# The speaker's propensity to deliberate, deliberative quality, and receptivity to the reason given increase
agents$dprop[p] <<- agents$dprop[p] + .1*agents$dprop[p]
if(agents$dprop[p] > 1){agents$dprop[p] <<- 1}
agents$dqual[p] <<- agents$dqual[p] + .1*agents$dqual[p]
if(agents$dqual[p] > 1){agents$dqual[p] <<- 1}
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] <<-
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] +
.1*argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3]
if(argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] > 1){
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] <<- 1
}
# The argument is added to the listener's against-repertoire and their receptivity to the reason given increases
agents$o.rep[a][[1]] <<- unique(as.numeric(c(agents$o.rep[a][[1]], p.reas)))
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] +
.1*argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3]
if(argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] > 1){
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<- 1
}
}
# If an argument is weak:
if(a.force < (agents[agid == p, dqual]/2)){
# The speaker's propensity to deliberate decreases
agents$dprop[a] <<- agents$dprop[a] - .1*agents$dprop[a]
if(agents$dprop[a] <0){agents$dprop[a] <<- 0}
# The listener's receptivity to the reason given decreases, and their receptivity to the reason they gave increases
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<-
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] -
.1*argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3]
if(argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <0){
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<- 0
}
if(p.force < (agents[agid == a, dqual]/2)){
# The speaker's propensity to deliberate decreases
agents$dprop[p] <<- agents$dprop[p] - .1*agents$dprop[p]
if(agents$dprop[p] <0){agents$dprop[p] <<- 0}
# The listener's receptivity to the reason given decreases, and their receptivity to the reason they gave increases
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] -
.1*argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3]
if(argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] < 0){
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<- 0
}
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] +
.1*argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3]
if(argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] < 1){
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<- 1
}
}
}
}
# Once deliberation has concluded, remove partners from delibs before the next iteration
delibs <- delibs[-which(delibs %in% c(a,p))]
}
# Update position confidences
agents$p.conf <- sapply(1:nrow(agents), function(x){
agents$p.conf[x] <- sum(argspace[[x]][,3][argspace[[x]]$position == agents$position[x]][agents$p.rep[x][[1]]]) -
sum(argspace[[x]][,3][argspace[[x]]$position != agents$position[x]][agents$o.rep[x][[1]]])
})
# If position confidence falls below zero, flip positions
agents$position <- sapply(1:nrow(agents), function(x){
if(agents$position[x] == "for" & agents$p.conf[x] < 0){
agents$position[x] <- "against"
}
if(agents$position[x] == "against" & agents$p.conf[x] < 0){
agents$position[x] <- "for"
}
else{agents$position[x] <- agents$position[x]}
})
}
}
test <- do.delibspace()
agents <- test[[1]]
argspace <- test[[2]]
View(agents)
deliberate(100)
test <- do.delibspace()
agents <- test[[1]]
agents1 <- agents
argspace <- test[[2]]
View(agents)
deliberate(100)
mean(agents$dqual)
mean(agents1$dqual)
mean(agents$dprop)
mean(agents1$dprop)
mean(agents1$p.conf)
mean(agents$p.conf)
hist(agents1$position)
table(agents1$position)
table(agents$position)
mean(length(agents$p.rep))
mean(length(agents$p.rep[[1]]))
agents$p.rep[[1]]
mean(length(agents$p.rep[[1:400]]))
deliberate(10000)
mean(agents$dqual)
mean(agents1$dqual)
mean(agents$dprop)
mean(agents1$dprop)
deliberate <- function(iterations){
for(i in iterations){
agents$cdelib <<- sapply(1:nrow(agents), function(x){
agents$dprop[x] > runif(1) # Each agent chooses whether to deliberate in this round
})
# Subfunction for agents to pick a deliberative partner (wrapped world)
pickpartner <- function(x_value, y_value, dimension){
cur_ag <- agents[x == x_value & y == y_value, agid] # Store current agent ID
if(cur_ag %in% agents$dpart){
return(agents[agents$dpart == cur_ag, agid]) # If agent has already been claimed as a deliberative partner, match them with the agent who claimed them
}else{
x_vals <- c(x_value+1, x_value, x_value-1) # Look left and right
x_vals <- sapply(x_vals, function(x){
if(x < 1){x = dimension}
if(x > dimension){x = 1}
else{x}})
y_vals <- c(y_value+1, y_value, y_value-1) # Look up and down
y_vals <- sapply(y_vals, function(x){
if(x < 1){x = dimension}
if(x > dimension){x = 1}
else{x}})
# Return agent IDs in Moore Neighborhood who want to deliberate but don't already have a partner
delib.ids <- agents[x %in% x_vals & y %in% y_vals & cdelib == TRUE & agid != cur_ag, agid] # Deliberating agents in Moore neighborhood
delib.ids <- delib.ids[! delib.ids %in% agents$dpart] # Subtract agents who are already in list of partners
delib.ids <- delib.ids[! delib.ids %in% agents$agid[!is.na(agents$dpart)]] # Subtract agents who already have partners
if(length(delib.ids) == 0){
return(NA)
}
if(length(delib.ids) == 1){
return(delib.ids)
}else{
return(sample(delib.ids, 1)) # Return one agent from Moore neighborhood who isn't already partnered up
}
}
}
agents$dpart <<- NA
for(p in 1:nrow(agents)){
if(agents$cdelib[p] == FALSE) {next}
# Agents who want to deliberate partner up
agents$dpart[p] <<- pickpartner(x_value = agents[agid == p, x], y_value = agents[agid == p, y], dimension = max(agents$x))
}
delibs <- agents$agid[!is.na(agents$dpart)] # Vector of agents who are deliberating this round
delibspace <- subset(agents, agid %in% delibs, select = c(1:5))
delibspace$reas <- NA
delibspace$force <- NA
for(i in 1:(length(delibs)/2)){
# Deliberation between first agent in delibs vector and their partner
a <- delibs[1]
p <- agents[agid == delibs[1], dpart]
# Agents each state position and reason, sampled from their argument repertoire
a.pos <- agents[agid == a, position]
a.reas <- sample(agents[agid == a, p.rep[[1]]], 1)
p.pos <- agents[agid == p, position]
p.reas <- sample(agents[agid == p, p.rep[[1]]], 1)
# Force of agent's argument = agent's deliberative quality * listener's receptivity to the reason they give
a.force <- agents[agid == a, dqual] * argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3]
p.force <- agents[agid == p, dqual] * argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3]
# Update deliberative space with reasons and positions
delibspace$reas[delibspace$agid == a] <- a.reas
delibspace$reas[delibspace$agid == p] <- p.reas
delibspace$force[delibspace$agid == a] <- a.force
delibspace$force[delibspace$agid == p] <- p.force
# If the agents agree:
if(a.pos == p.pos){
# If an argument is powerful (note: lower threshold for powerful arguments if agents agree):
if(a.force > (agents[agid == p, dqual]/2)){
# The speaker's propensity to deliberate, deliberative quality, and receptivity to the reason given increase
agents$dprop[a] <<- agents$dprop[a] + .1*agents$dprop[a]
if(agents$dprop[a] > 1){agents$dprop[a] <<- 1}
agents$dqual[a] <<- agents$dqual[a] + .1*agents$dqual[a]
if(agents$dqual[a] > 1){agents$dqual[a] <<- 1}
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] +
.1*argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3]
if(argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] > 1){
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<- 1
}
# The argument is added to the listener's for-repertoire and their receptivity to the reason given increases
agents$p.rep[p][[1]] <<- unique(as.numeric(c(agents$p.rep[p][[1]], a.reas)))
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<-
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] +
.1*argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3]
if(argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] > 1){
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<- 1
}
}
if(p.force > (agents[agid == a, dqual]/2)){
# The speaker's propensity to deliberate, deliberative quality, and receptivity to the reason given increase
agents$dprop[p] <<- agents$dprop[p] + .1*agents$dprop[p]
if(agents$dprop[p] > 1){agents$dprop[p] <<- 1}
agents$dqual[p] <<- agents$dqual[p] + .1*agents$dqual[p]
if(agents$dqual[p] > 1){agents$dqual[p] <<- 1}
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] <<-
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] +
.1*argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3]
if(argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] > 1){
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] <<- 1
}
# The argument is added to the listener's for-repertoire and their receptivity to the reason given increases
agents$p.rep[a][[1]] <<- unique(as.numeric(c(agents$p.rep[a][[1]], p.reas)))
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] +
.1*argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3]
if(argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] > 1){
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<- 1
}
}
# If an argument is not powerful, nothing happens
}
# If the agents disagree:
if(a.pos != p.pos){
# If an argument is powerful:
if(a.force > (agents[agid == p, dqual])){
# The speaker's propensity to deliberate, deliberative quality, and receptivity to the reason given increase
agents$dprop[a] <<- agents$dprop[a] + .1*agents$dprop[a]
if(agents$dprop[a] > 1){agents$dprop[a] <<- 1}
agents$dqual[a] <<- agents$dqual[a] + .1*agents$dqual[a]
if(agents$dqual[a] > 1){agents$dqual[a] <<- 1}
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] +
.1*argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3]
if(argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] > 1){
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<- 1
}
# The argument is added to the listener's against-repertoire and their receptivity to the reason given increases
agents$o.rep[p][[1]] <<- unique(as.numeric(c(agents$o.rep[p][[1]], a.reas)))
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<-
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] +
.1*argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3]
if(argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] > 1){
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<- 1
}
}
if(p.force > (agents[agid == a, dqual])){
# The speaker's propensity to deliberate, deliberative quality, and receptivity to the reason given increase
agents$dprop[p] <<- agents$dprop[p] + .1*agents$dprop[p]
if(agents$dprop[p] > 1){agents$dprop[p] <<- 1}
agents$dqual[p] <<- agents$dqual[p] + .1*agents$dqual[p]
if(agents$dqual[p] > 1){agents$dqual[p] <<- 1}
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] <<-
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] +
.1*argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3]
if(argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] > 1){
argspace[[p]][argspace[[p]]$position == p.pos & argspace[[p]]$reason == p.reas][,3] <<- 1
}
# The argument is added to the listener's against-repertoire and their receptivity to the reason given increases
agents$o.rep[a][[1]] <<- unique(as.numeric(c(agents$o.rep[a][[1]], p.reas)))
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] +
.1*argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3]
if(argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] > 1){
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<- 1
}
}
# If an argument is weak:
if(a.force < (agents[agid == p, dqual]/2)){
# The speaker's propensity to deliberate decreases
agents$dprop[a] <<- agents$dprop[a] - .1*agents$dprop[a]
if(agents$dprop[a] <0){agents$dprop[a] <<- 0}
# The listener's receptivity to the reason given decreases, and their receptivity to the reason they gave increases
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<-
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] -
.1*argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3]
if(argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <0){
argspace[[p]][argspace[[p]]$position == a.pos & argspace[[p]]$reason == a.reas][,3] <<- 0
}
if(p.force < (agents[agid == a, dqual]/2)){
# The speaker's propensity to deliberate decreases
agents$dprop[p] <<- agents$dprop[p] - .1*agents$dprop[p]
if(agents$dprop[p] <0){agents$dprop[p] <<- 0}
# The listener's receptivity to the reason given decreases, and their receptivity to the reason they gave increases
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] -
.1*argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3]
if(argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] < 0){
argspace[[a]][argspace[[a]]$position == p.pos & argspace[[a]]$reason == p.reas][,3] <<- 0
}
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<-
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] +
.1*argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3]
if(argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] < 1){
argspace[[a]][argspace[[a]]$position == a.pos & argspace[[a]]$reason == a.reas][,3] <<- 1
}
}
}
}
# Once deliberation has concluded, remove partners from delibs before the next iteration
delibs <- delibs[-which(delibs %in% c(a,p))]
}
# Update position confidences
agents$p.conf <<- sapply(1:nrow(agents), function(x){
agents$p.conf[x] <- sum(argspace[[x]][,3][argspace[[x]]$position == agents$position[x]][agents$p.rep[x][[1]]]) -
sum(argspace[[x]][,3][argspace[[x]]$position != agents$position[x]][agents$o.rep[x][[1]]])
})
# If position confidence falls below zero, flip positions
agents$position <<- sapply(1:nrow(agents), function(x){
if(agents$position[x] == "for" & agents$p.conf[x] < 0){
agents$position[x] <<- "against"
}
if(agents$position[x] == "against" & agents$p.conf[x] < 0){
agents$position[x] <<- "for"
}
else{agents$position[x] <<- agents$position[x]}
})
}
}
test <- do.delibspace()
agents <- test[[1]]
agents1 <- agents
argspace <- test[[2]]
View(agents)
?aes
agents$position <- as.factor(agents$position)
library(ggplot2)
ggplot(data = agents, aes(x = x, y = y, color = position))+
geom_point()
class(agents$position)
ggplot()+
geom_point(data = agents, aes(x = x, y = y, color = position), size = 100/sqrt(prod(dims)))
