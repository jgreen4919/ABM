# Once deliberation has concluded, remove partners from delibs before the next iteration
delibs <- delibs[-which(delibs %in% c(a,p))]
}
# When loop for this round of deliberation finishes:
# Update position confidences
agents$p.conf <<- sapply(1:nrow(agents), function(x){
sum(argspace[[x]][,3][argspace[[x]]$position == agents$position[x]][agents$p.rep[x][[1]]]) -
sum(argspace[[x]][,3][argspace[[x]]$position != agents$position[x]][agents$o.rep[x][[1]]]) /
sum(argspace[[x]][,3][argspace[[x]]$position == agents$position[x]][agents$p.rep[x][[1]]]) +
sum(argspace[[x]][,3][argspace[[x]]$position != agents$position[x]][agents$o.rep[x][[1]]])
})
# If position confidence falls below zero, flip positions
for(z in 1:nrow(agents)){
if(agents$p.conf[z] >= 0){next}
else{
nflip <- nflip +1
if(agents$position[z] == "for"){
agents$position[z] <<- "against"
}else{agents$position[z] <<- "for"}
placeholder.prep <- agents$p.rep[z][[1]]
placeholder.orep <- agents$o.rep[z][[1]]
agents$p.rep[z][[1]] <<- placeholder.orep
agents$o.rep[z][[1]] <<- placeholder.prep
}
}
# Update repertoire sizes
agents$p.repsize <<- sapply(agents$p.rep, function(x){
length(x)
})
agents$o.repsize <<- sapply(agents$o.rep, function(x){
length(x)
})
# Update vectors of values to store
pct.for <- c(pct.for, sum(agents$position == "for")/nrow(agents))
mean.dqual <- c(mean.dqual, mean(agents$dqual))
mean.dprop <- c(mean.dprop, mean(agents$dprop))
mean.prepsize <- c(mean.prepsize, mean(agents$p.repsize))
mean.orepsize <- c(mean.orepsize, mean(agents$o.repsize))
mean.pconf <- c(mean.pconf, mean(agents$p.conf))
flips <- c(flips, nflip)
}
returns <- list(pct.for, ndelib, flips, mean.dqual, mean.dprop, mean.prepsize, mean.orepsize, mean.pconf)
names(returns) <- c("pct.for","num.delib","flips", "mean.dqual","mean.dprop","mean.prepsize","mean.orepsize","mean.pconf")
return(returns)
}
init4 <- do.delibspace(olead.dens = 0)
init <- do.delibspace()
runif(1) < 0
init4[[1]]
init4[[2]]
init4[[1]]
agents <- init4[[1]]
agents4 <- agents
argspace <- init4[[2]]
argspace4 <- argspace
run4 <- deliberate(100)
agents$o.rep[3][[1]]
agents$o.rep[8][[1]]
delibs <- agents$agid[!is.na(agents$dpart)] # Vector of agents who are deliberating this round
a <- delibs[1]
p <- agents[agid == delibs[1], dpart]
a.pos <- agents[agid == a, position]
a.reas <- sample(agents[agid == a, p.rep[[1]]], 1)
p.pos <- agents[agid == p, position]
p.reas <- sample(agents[agid == p, p.rep[[1]]], 1)
a.reas
agents$o.rep[p][[1]]
c(agents$o.rep[p][[1]], a.reas)
class(agents$o.rep[p][[1]])
class(c(agents$o.rep[p][[1]], a.reas))
init <- do.delibspace()
agents <- init[[1]]
agents1 <- agents
argspace <- init[[2]]
argspace1 <- argspace
run1 <- deliberate(100)
agents1c <- agents
argspace1c <- argspace
plot(density(agents1$dprop))
plot(density(agents1c$dprop))
plotDelib(title = "Initial Deliberative Space (10% Leaders)", dat = agents1, view = "p.repsize")
plotDelib(title = "Deliberative Space after 100 Rounds (10% Leaders)", dat = agents1c, view = "p.repsize")
plotDelib <- function(title = "Deliberative Space", dat = agents, view = "position"){
require(data.table)
require(ggplot2)
require(RColorBrewer)
# find the dimensions of the grid to get the best dot size
dims <- c(max(dat$x), max(dat$y))
if(view == "position"){
# plot each agent's position
p <- ggplot() +
# resize dots to grid
geom_point(data = dat,
aes(x = x, y = y, color = position),
size = 100/sqrt(prod(dims)))
}
if(view == "dqual"){
p <- ggplot() +
# resize dots to grid
geom_point(data = dat,
aes(x = x, y = y, color = dqual),
size = 100/sqrt(prod(dims)))+
scale_colour_gradient(name = "Deliberative Skill", low = "white", high = "blue", limits = c(0,1))
}
if(view == "dprop"){
p <- ggplot() +
# resize dots to grid
geom_point(data = dat,
aes(x = x, y = y, color = dprop),
size = 100/sqrt(prod(dims)))+
scale_colour_gradient(name = "Deliberation Propensity", low = "white", high = "blue", limits = c(0,1))
}
if(view == "p.conf"){
p <- ggplot() +
# resize dots to grid
geom_point(data = dat,
aes(x = x, y = y, color = p.conf),
size = 100/sqrt(prod(dims)))+
scale_colour_gradient(name = "Position Confidence", low = "white", high = "blue", limits = c(0,1))
}
if(view == "p.repsize"){
p <- ggplot() +
# resize dots repertoire size
geom_point(data = dat,
aes(x = x, y = y, color = p.conf, size = p.repsize))+
scale_colour_gradient(name = "Position Confidence", low = "white", high = "blue", limits = c(0,max(dat$p.conf)))+
guides(size = guide_legend(title = "For-Repertoire Size"))
}
if(view == "o.repsize"){
p <- ggplot() +
# resize dots to grid
geom_point(data = dat,
aes(x = x, y = y, color = p.conf, size = o.repsize))+
scale_colour_gradient(name = "Position Confidence", low = "white", high = "blue", limits = c(0,1))+
guides(size = guide_legend(title = "Against-Repertoire Size"))
}
# theme: mostly blank
p <- p+
theme_bw() +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank(),
plot.title = element_text(lineheight=3,
face="bold",
color="black",
size=14)) +
# fix axes to avoid distortion in the picture
coord_fixed(ratio = 1) +
# add the title
ggtitle(title)
return(p)
}
plotDelib(title = "Deliberative Space after 100 Rounds (10% Leaders)", dat = agents1c, view = "p.repsize")
plotDelib <- function(title = "Deliberative Space", dat = agents, view = "position"){
require(data.table)
require(ggplot2)
require(RColorBrewer)
# find the dimensions of the grid to get the best dot size
dims <- c(max(dat$x), max(dat$y))
if(view == "position"){
# plot each agent's position
p <- ggplot() +
# resize dots to grid
geom_point(data = dat,
aes(x = x, y = y, color = position),
size = 100/sqrt(prod(dims)))
}
if(view == "dqual"){
p <- ggplot() +
# resize dots to grid
geom_point(data = dat,
aes(x = x, y = y, color = dqual),
size = 100/sqrt(prod(dims)))+
scale_colour_gradient(name = "Deliberative Skill", low = "white", high = "blue", limits = c(0,1))
}
if(view == "dprop"){
p <- ggplot() +
# resize dots to grid
geom_point(data = dat,
aes(x = x, y = y, color = dprop),
size = 100/sqrt(prod(dims)))+
scale_colour_gradient(name = "Deliberation Propensity", low = "white", high = "blue", limits = c(0,1))
}
if(view == "p.conf"){
p <- ggplot() +
# resize dots to grid
geom_point(data = dat,
aes(x = x, y = y, color = p.conf),
size = 100/sqrt(prod(dims)))+
scale_colour_gradient(name = "Position Confidence", low = "white", high = "blue", limits = c(0,1))
}
if(view == "p.repsize"){
p <- ggplot() +
# resize dots repertoire size
geom_point(data = dat,
aes(x = x, y = y, color = p.conf, size = p.repsize))+
scale_colour_gradient(name = "Position Confidence", low = "white", high = "blue", limits = c(0,1))+
guides(size = guide_legend(title = "For-Repertoire Size"))
}
if(view == "o.repsize"){
p <- ggplot() +
# resize dots to grid
geom_point(data = dat,
aes(x = x, y = y, color = p.conf, size = o.repsize))+
scale_colour_gradient(name = "Position Confidence", low = "white", high = "blue", limits = c(0,1))+
guides(size = guide_legend(title = "Against-Repertoire Size"))
}
# theme: mostly blank
p <- p+
theme_bw() +
theme(axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank(),
plot.title = element_text(lineheight=3,
face="bold",
color="black",
size=14)) +
# fix axes to avoid distortion in the picture
coord_fixed(ratio = 1) +
# add the title
ggtitle(title)
return(p)
}
rm(list = ls())
init <- do.delibspace()
source("~/Desktop/ABM/Deliberation/delib_functions.R")
init <- do.delibspace()
agents <- init[[1]]
agents1 <- agents
argspace <- init[[2]]
argspace1 <- argspace
run1 <- deliberate(100)
agents1c <- agents
argspace1c <- argspace
plotDelib(title = "Initial Deliberative Space (10% Leaders)", dat = agents1, view = "p.repsize")
plotDelib(title = "Deliberative Space after 100 Rounds (10% Leaders)", dat = agents1c, view = "p.repsize")
agents
agents1
rm(list = ls())
source("~/Desktop/ABM/Deliberation/delib_functions.R")
init <- do.delibspace()
agents <- init[[1]]
agents1 <- agents
argspace <- init[[2]]
argspace1 <- argspace
run1 <- deliberate(100)
agents1c <- agents
argspace1c <- argspace
plotDelib(title = "Initial Deliberative Space (10% Leaders)", dat = agents1, view = "p.repsize")
plotDelib(title = "Deliberative Space after 100 Rounds (10% Leaders)", dat = agents1c, view = "p.repsize")
agents1c
plot(density(agents1$p.conf))
plot(density(agents1c$p.conf))
table(agents1c$p.conf)
min(agents1c$p.conf)
source("~/Desktop/ABM/Deliberation/delib_functions.R")
rm(list = ls())
source("~/Desktop/ABM/Deliberation/delib_functions.R")
setwd("~/Desktop/ABM/Deliberation/Viz")
load("delib_runs.RData")
setwd("~/Desktop/ABM/Deliberation/")
load("delib_runs.RData")
setwd("~/Desktop/ABM/Deliberation/Viz")
plotDelib(title = "Initial Deliberative Space (Default Run / Local Vision Rule)", dat = agents1l, view = "p.repsize")
plotDelib(title = "Deliberative Space after 100 Rounds (Default Run / Local Vision Rule)", dat = agents1lc, view = "p.repsize")
plotDelib(title = "Initial Deliberative Space (Default Run / Global Vision Rule)", dat = agents1g, view = "p.repsize")
plotDelib(title = "Deliberative Space after 100 Rounds (Default Run / Global Vision Rule)", dat = agents1gc, view = "p.repsize")
plotDelib(title = "Deliberative Space after 100 Rounds (Default Run / Global Vision Rule)", dat = agents1gc, view = "o.repsize")
plotDelib(title = "Deliberative Space after 100 Rounds (Default Run / Local Vision Rule)", dat = agents1lc, view = "dqual")
plotDelib(title = "Initial Deliberative Space (Default Run / Local Vision Rule)", dat = agents1l, view = "dqual")
plotDelib(title = "Deliberative Space after 100 Rounds (Default Run / Local Vision Rule)", dat = agents1lc, view = "dqual")
plotDelib(title = "Initial Deliberative Space (Default Run / Global Vision Rule)", dat = agents1g, view = "dqual")
plotDelib(title = "Deliberative Space after 100 Rounds (Default Run / Global Vision Rule)", dat = agents1gc, view = "dqual")
plot(density(c(agents1l$dprop, agents1l_2$dprop, agents1l_3$dprop, agents1l_4$dprop, agents1l_5$dprop)),
main = "Initial Deliberation Propensity (Default Run / Local Vision Rule)")
plot(density(c(agents1g$dprop, agents1g_2$dprop, agents1g_3$dprop, agents1g_4$dprop, agents1g_5$dprop)),
main = "Initial Deliberation Propensity (Default Run / Global Vision Rule)")
plot(density(c(agents1lc$dprop, agents1lc_2$dprop, agents1lc_3$dprop, agents1lc_4$dprop, agents1lc_5$dprop)),
main = "Deliberation Propensity after 100 Rounds (Default Run / Local Vision Rule)")
plot(density(c(agents1gc$dprop, agents1gc_2$dprop, agents1gc_3$dprop, agents1gc_4$dprop, agents1gc_5$dprop)),
main = "Deliberation Propensity after 100 Rounds (Default Run / Global Vision Rule)")
for(i in 1:length(run1l$tension)){
if(i == 1){
plot(-100, -100, xlim=c(1,100), ylim=c(0,.7), ylab="Tension Level", xlab="Iteration", type="n", cex.axis=0.8, main = "Tension Level Each Round")
}else{
segments(i-1, run1l_agg$tension[i-1], i, run1l_agg$tension[i], col = "pink", lwd=2)
segments(i-1, run1g_agg$tension[i-1], i, run1g_agg$tension[i], col = "red", lwd=2)
segments(i-1, run2l_agg$tension[i-1], i, run2l_agg$tension[i], col = "lightblue", lwd=2)
segments(i-1, run2g_agg$tension[i-1], i, run2g_agg$tension[i], col = "blue", lwd=2)
segments(i-1, run3l_agg$tension[i-1], i, run3l_agg$tension[i], col = "green", lwd=2)
segments(i-1, run3g_agg$tension[i-1], i, run3g_agg$tension[i], col = "darkgreen", lwd=2)
segments(i-1, run4l_agg$tension[i-1], i, run4l_agg$tension[i], col = "grey", lwd=2)
segments(i-1, run4g_agg$tension[i-1], i, run4g_agg$tension[i], col = "black", lwd=2)
segments(i-1, run5l_agg$tension[i-1], i, run5l_agg$tension[i], col = "tan", lwd=2)
segments(i-1, run5g_agg$tension[i-1], i, run5g_agg$tension[i], col = "brown", lwd=2)
}
}
legend(x = 0, y = .15,
legend = c("Default Local","20% Leaders Local", "High Prop Local",
"0% Leaders Local", "70% Init. For Local",
"Default Global","20% Leaders Global", "High Prop Global",
"0% Leaders Global", "70% Init. For Global"),
fill = c("pink","lightblue","green","grey","tan",
"red","blue","darkgreen","black","brown"),
ncol = 2)
for(i in 1:length(run1l$tension)){
if(i == 1){
plot(-100, -100, xlim=c(1,100), ylim=c(0,.7), ylab="Tension Level", xlab="Iteration", type="n", cex.axis=0.8, main = "Tension Level Each Round")
}else{
segments(i-1, run1l_agg$tension[i-1], i, run1l_agg$tension[i], col = "pink", lwd=2)
segments(i-1, run1g_agg$tension[i-1], i, run1g_agg$tension[i], col = "red", lwd=2)
segments(i-1, run2l_agg$tension[i-1], i, run2l_agg$tension[i], col = "lightblue", lwd=2)
segments(i-1, run2g_agg$tension[i-1], i, run2g_agg$tension[i], col = "blue", lwd=2)
segments(i-1, run3l_agg$tension[i-1], i, run3l_agg$tension[i], col = "green", lwd=2)
segments(i-1, run3g_agg$tension[i-1], i, run3g_agg$tension[i], col = "darkgreen", lwd=2)
segments(i-1, run4l_agg$tension[i-1], i, run4l_agg$tension[i], col = "grey", lwd=2)
segments(i-1, run4g_agg$tension[i-1], i, run4g_agg$tension[i], col = "black", lwd=2)
segments(i-1, run5l_agg$tension[i-1], i, run5l_agg$tension[i], col = "tan", lwd=2)
segments(i-1, run5g_agg$tension[i-1], i, run5g_agg$tension[i], col = "brown", lwd=2)
}
}
legend(x = 0, y = .15,
legend = c("Default Local","20% Leaders Local", "High Prop Local",
"0% Leaders Local", "70% Init. For Local",
"Default Global","20% Leaders Global", "High Prop Global",
"0% Leaders Global", "70% Init. For Global"),
fill = c("pink","lightblue","green","grey","tan",
"red","blue","darkgreen","black","brown"),
ncol = 2)
for(i in 1:length(run1l$num.delib)){
if(i == 1){
plot(-100, -100, xlim=c(1,100), ylim=c(100,300), ylab="Number", xlab="Iteration", type="n", cex.axis=0.8, main = "Number Deliberating Each Round")
}else{
segments(i-1, run1l_agg$num.delib[i-1], i, run1l_agg$num.delib[i], col = "pink", lwd=2)
segments(i-1, run1g_agg$num.delib[i-1], i, run1g_agg$num.delib[i], col = "red", lwd=2)
segments(i-1, run2l_agg$num.delib[i-1], i, run2l_agg$num.delib[i], col = "lightblue", lwd=2)
segments(i-1, run2g_agg$num.delib[i-1], i, run2g_agg$num.delib[i], col = "blue", lwd=2)
segments(i-1, run3l_agg$num.delib[i-1], i, run3l_agg$num.delib[i], col = "green", lwd=2)
segments(i-1, run3g_agg$num.delib[i-1], i, run3g_agg$num.delib[i], col = "darkgreen", lwd=2)
segments(i-1, run4l_agg$num.delib[i-1], i, run4l_agg$num.delib[i], col = "grey", lwd=2)
segments(i-1, run4g_agg$num.delib[i-1], i, run4g_agg$num.delib[i], col = "black", lwd=2)
segments(i-1, run5l_agg$num.delib[i-1], i, run5l_agg$num.delib[i], col = "tan", lwd=2)
segments(i-1, run5g_agg$num.delib[i-1], i, run5g_agg$num.delib[i], col = "brown", lwd=2)
}
}
legend(x = 20, y = 290,
legend = c("Default Local","20% Leaders Local", "High Prop Local",
"0% Leaders Local", "70% Init. For Local",
"Default Global","20% Leaders Global", "High Prop Global",
"0% Leaders Global", "70% Init. For Global"),
fill = c("pink","lightblue","green","grey","tan",
"red","blue","darkgreen","black","brown"),
ncol = 2)
for(i in 1:length(run1l$mean.orepsize)){
if(i == 1){
plot(-100, -100, xlim=c(1,100), ylim=c(1,3), ylab="Value", xlab="Iteration", type="n", cex.axis=0.8, main = "Mean Against-Repertoire Size")
}else{
segments(i-1, run1l_agg$mean.orepsize[i-1], i, run1l_agg$mean.orepsize[i], col = "pink", lwd=2)
segments(i-1, run1g_agg$mean.orepsize[i-1], i, run1g_agg$mean.orepsize[i], col = "red", lwd=2)
segments(i-1, run2l_agg$mean.orepsize[i-1], i, run2l_agg$mean.orepsize[i], col = "lightblue", lwd=2)
segments(i-1, run2g_agg$mean.orepsize[i-1], i, run2g_agg$mean.orepsize[i], col = "blue", lwd=2)
segments(i-1, run3l_agg$mean.orepsize[i-1], i, run3l_agg$mean.orepsize[i], col = "green", lwd=2)
segments(i-1, run3g_agg$mean.orepsize[i-1], i, run3g_agg$mean.orepsize[i], col = "darkgreen", lwd=2)
segments(i-1, run4l_agg$mean.orepsize[i-1], i, run4l_agg$mean.orepsize[i], col = "grey", lwd=2)
segments(i-1, run4g_agg$mean.orepsize[i-1], i, run4g_agg$mean.orepsize[i], col = "black", lwd=2)
segments(i-1, run5l_agg$mean.orepsize[i-1], i, run5l_agg$mean.orepsize[i], col = "tan", lwd=2)
segments(i-1, run5g_agg$mean.orepsize[i-1], i, run5g_agg$mean.orepsize[i], col = "brown", lwd=2)
}
}
legend(x = 0, y = 2.75,
legend = c("Default Local","20% Leaders Local", "High Prop Local",
"0% Leaders Local", "70% Init. For Local",
"Default Global","20% Leaders Global", "High Prop Global",
"0% Leaders Global", "70% Init. For Global"),
fill = c("pink","lightblue","green","grey","tan",
"red","blue","darkgreen","black","brown"),
ncol = 2)
for(i in 1:length(run1l$mean.prepsize)){
if(i == 1){
plot(-100, -100, xlim=c(1,100), ylim=c(3,10), ylab="Value", xlab="Iteration", type="n", cex.axis=0.8, main = "Mean For-Repertoire Size")
}else{
segments(i-1, run1l_agg$mean.prepsize[i-1], i, run1l_agg$mean.prepsize[i], col = "pink", lwd=2)
segments(i-1, run1g_agg$mean.prepsize[i-1], i, run1g_agg$mean.prepsize[i], col = "red", lwd=2)
segments(i-1, run2l_agg$mean.prepsize[i-1], i, run2l_agg$mean.prepsize[i], col = "lightblue", lwd=2)
segments(i-1, run2g_agg$mean.prepsize[i-1], i, run2g_agg$mean.prepsize[i], col = "blue", lwd=2)
segments(i-1, run3l_agg$mean.prepsize[i-1], i, run3l_agg$mean.prepsize[i], col = "green", lwd=2)
segments(i-1, run3g_agg$mean.prepsize[i-1], i, run3g_agg$mean.prepsize[i], col = "darkgreen", lwd=2)
segments(i-1, run4l_agg$mean.prepsize[i-1], i, run4l_agg$mean.prepsize[i], col = "grey", lwd=2)
segments(i-1, run4g_agg$mean.prepsize[i-1], i, run4g_agg$mean.prepsize[i], col = "black", lwd=2)
segments(i-1, run5l_agg$mean.prepsize[i-1], i, run5l_agg$mean.prepsize[i], col = "tan", lwd=2)
segments(i-1, run5g_agg$mean.prepsize[i-1], i, run5g_agg$mean.prepsize[i], col = "brown", lwd=2)
}
}
for(i in 1:length(run1l$mean.dprop)){
if(i == 1){
plot(-100, -100, xlim=c(1,100), ylim=c(.2, .6), ylab="Value", xlab="Round", type="n", cex.axis=0.8, main = "Mean Propensity to Deliberate")
}else{
segments(i-1, run1l_agg$mean.dprop[i-1], i, run1l_agg$mean.dprop[i], col = "pink", lwd=2)
segments(i-1, run2l_agg$mean.dprop[i-1], i, run2l_agg$mean.dprop[i], col = "lightblue", lwd=2)
segments(i-1, run3l_agg$mean.dprop[i-1], i, run3l_agg$mean.dprop[i], col = "green", lwd=2)
segments(i-1, run4l_agg$mean.dprop[i-1], i, run4l_agg$mean.dprop[i], col = "grey", lwd=2)
segments(i-1, run5l_agg$mean.dprop[i-1], i, run5l_agg$mean.dprop[i], col = "tan", lwd=2)
segments(i-1, run1g_agg$mean.dprop[i-1], i, run1g_agg$mean.dprop[i], col = "red", lwd=2)
segments(i-1, run2g_agg$mean.dprop[i-1], i, run2g_agg$mean.dprop[i], col = "blue", lwd=2)
segments(i-1, run3g_agg$mean.dprop[i-1], i, run3g_agg$mean.dprop[i], col = "darkgreen", lwd=2)
segments(i-1, run4g_agg$mean.dprop[i-1], i, run4g_agg$mean.dprop[i], col = "black", lwd=2)
segments(i-1, run5g_agg$mean.dprop[i-1], i, run5g_agg$mean.dprop[i], col = "brown", lwd=2)
}
}
legend(x = 20, y = .3,
legend = c("Default Local","20% Leaders Local", "High Prop Local",
"0% Leaders Local", "70% Init. For Local",
"Default Global","20% Leaders Global", "High Prop Global",
"0% Leaders Global", "70% Init. For Global"),
fill = c("pink","lightblue","green","grey","tan",
"red","blue","darkgreen","black","brown"),
ncol = 2)
for(i in 1:length(run1l_agg$mean.dqual)){
if(i == 1){
plot(-100, -100, xlim=c(1,100), ylim=c(.3, .7), ylab="Percent", xlab="Iteration", type="n", cex.axis=0.8, main = "Mean Deliberative Quality")
}else{
segments(i-1, run1l_agg$mean.dqual[i-1], i, run1l_agg$mean.dqual[i], col = "pink", lwd=2)
segments(i-1, run1g_agg$mean.dqual[i-1], i, run1g_agg$mean.dqual[i], col = "red", lwd=2)
segments(i-1, run2l_agg$mean.dqual[i-1], i, run2l_agg$mean.dqual[i], col = "lightblue", lwd=2)
segments(i-1, run2g_agg$mean.dqual[i-1], i, run2g_agg$mean.dqual[i], col = "blue", lwd=2)
segments(i-1, run3l_agg$mean.dqual[i-1], i, run3l_agg$mean.dqual[i], col = "green", lwd=2)
segments(i-1, run3g_agg$mean.dqual[i-1], i, run3g_agg$mean.dqual[i], col = "darkgreen", lwd=2)
segments(i-1, run4l_agg$mean.dqual[i-1], i, run4l_agg$mean.dqual[i], col = "grey", lwd=2)
segments(i-1, run4g_agg$mean.dqual[i-1], i, run4g_agg$mean.dqual[i], col = "black", lwd=2)
segments(i-1, run5l_agg$mean.dqual[i-1], i, run5l_agg$mean.dqual[i], col = "tan", lwd=2)
segments(i-1, run5g_agg$mean.dqual[i-1], i, run5g_agg$mean.dqual[i], col = "brown", lwd=2)
}
}
legend(x = 20, y = .47,
legend = c("Default Local","20% Leaders Local", "High Prop Local",
"0% Leaders Local",
"Default Global","20% Leaders Global", "High Prop Global",
"0% Leaders Global"),
fill = c("pink","lightblue","green","grey",
"red","blue","darkgreen","black"),
ncol = 2)
for(i in 1:length(run1l_agg$pct.for)){
if(i == 1){
plot(-100, -100, xlim=c(1,100), ylim=c(.45, .55), ylab="Percent", xlab="Iteration", type="n", cex.axis=0.8, main = "Percent in Favor: Balanced Runs")
}else{
segments(i-1, run1l_agg$pct.for[i-1], i, run1l_agg$pct.for[i], col = "pink", lwd=2)
segments(i-1, run1g_agg$pct.for[i-1], i, run1g_agg$pct.for[i], col = "red", lwd=2)
segments(i-1, run2l_agg$pct.for[i-1], i, run2l_agg$pct.for[i], col = "lightblue", lwd=2)
segments(i-1, run2g_agg$pct.for[i-1], i, run2g_agg$pct.for[i], col = "blue", lwd=2)
segments(i-1, run3l_agg$pct.for[i-1], i, run3l_agg$pct.for[i], col = "green", lwd=2)
segments(i-1, run3g_agg$pct.for[i-1], i, run3g_agg$pct.for[i], col = "darkgreen", lwd=2)
segments(i-1, run4l_agg$pct.for[i-1], i, run4l_agg$pct.for[i], col = "grey", lwd=2)
segments(i-1, run4g_agg$pct.for[i-1], i, run4g_agg$pct.for[i], col = "black", lwd=2)
}
}
legend(x = 20, y = .47,
legend = c("Default Local","20% Leaders Local", "High Prop Local",
"0% Leaders Local",
"Default Global","20% Leaders Global", "High Prop Global",
"0% Leaders Global"),
fill = c("pink","lightblue","green","grey",
"red","blue","darkgreen","black"),
ncol = 2)
for(i in 1:length(run1l_agg$pct.for)){
if(i == 1){
plot(-100, -100, xlim=c(1,100), ylim=c(.65,.75), ylab="Percent", xlab="Iteration", type="n", cex.axis=0.8, main = "Percent in Favor: Unbalanced Runs")
}else{
segments(i-1, run5l_agg$pct.for[i-1], i, run5l_agg$pct.for[i], col = "tan", lwd=2)
segments(i-1, run5g_agg$pct.for[i-1], i, run5g_agg$pct.for[i], col = "brown", lwd=2)
}
}
legend(x = 20, y = .68,
legend = c("Local Vision Rule","Global Vision Rule"),
fill = c("tan","brown"),
ncol = 2)
for(i in 1:length(run1l$mean.pconf)){
if(i == 1){
plot(-100, -100, xlim=c(1,100), ylim=c(.65,.9), ylab="Value", xlab="Iteration", type="n", cex.axis=0.8, main = "Position Confidence")
}else{
segments(i-1, run1l$mean.pconf[i-1], i, run1l$mean.pconf[i], col = "pink", lwd=2)
segments(i-1, run1g$mean.pconf[i-1], i, run1g$mean.pconf[i], col = "red", lwd=2)
segments(i-1, run2l$mean.pconf[i-1], i, run2l$mean.pconf[i], col = "lightblue", lwd=2)
segments(i-1, run2g$mean.pconf[i-1], i, run2g$mean.pconf[i], col = "blue", lwd=2)
segments(i-1, run3l$mean.pconf[i-1], i, run3l$mean.pconf[i], col = "green", lwd=2)
segments(i-1, run3g$mean.pconf[i-1], i, run3g$mean.pconf[i], col = "darkgreen", lwd=2)
segments(i-1, run4l$mean.pconf[i-1], i, run4l$mean.pconf[i], col = "grey", lwd=2)
segments(i-1, run4g$mean.pconf[i-1], i, run4g$mean.pconf[i], col = "black", lwd=2)
segments(i-1, run5l$mean.pconf[i-1], i, run5l$mean.pconf[i], col = "tan", lwd=2)
segments(i-1, run5g$mean.pconf[i-1], i, run5g$mean.pconf[i], col = "brown", lwd=2)
}
}
plotDelib(title = "Deliberative Space after 100 Rounds (Default Run / Local Vision Rule)", dat = agents1lc, view = "dqual")
plotDelib(title = "Initial Deliberative Space (Default Run / Global Vision Rule)", dat = agents1g, view = "dqual")
plotDelib(title = "Deliberative Space after 100 Rounds (Default Run / Global Vision Rule)", dat = agents1gc, view = "dqual")
plotDelib(title = "Initial Deliberative Space (Default Run / Local Vision Rule)", dat = agents1l, view = "dprop")
plotDelib(title = "Deliberative Space after 100 Rounds (Default Run / Local Vision Rule)", dat = agents1lc, view = "dprop")
